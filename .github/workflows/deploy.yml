name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build_and_push:
    name: Build e Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build da imagem Docker
        run: docker build -t devsamuel1227/projeto-vollo:latest backend/

      - name: Push da imagem para Docker Hub
        run: docker push devsamuel1227/projeto-vollo:latest

  sonar_and_deploy:
    name: Análise SonarQube e Deploy remoto
    runs-on: ubuntu-latest
    needs: build_and_push

    steps:
      - name: Preparar chave SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

      - name: Executar SonarQube e deploy remoto
        env:
          IMAGE_NAME: devsamuel1227/projeto-vollo:latest
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_ed25519 aluno@201.23.3.86 << 'EOF'
            # Inicia container SonarQube temporário
            docker run -d --name sonar-temp -p 9000:9000 sonarqube

            # Espera SonarQube subir (máx 60s)
            for i in {1..30}; do
              if curl -s http://localhost:9000/api/system/status | grep -q "UP"; then
                break
              fi
              sleep 2
            done

            if ! curl -s http://localhost:9000/api/system/status | grep -q "UP"; then
              echo "SonarQube não subiu a tempo."
              docker rm -f sonar-temp
              exit 1
            fi

            # Executa análise (ajuste o scanner conforme seu projeto)
            docker run --rm \
              -v /home/aluno/projeto-vollo:/usr/src \
              sonarsource/sonar-scanner-cli \
              -Dsonar.host.url=http://localhost:9000 \
              -Dsonar.login= # <-- configure token no servidor, ou pule essa linha e configure via variáveis

            # Captura código de saída do scanner
            SCANNER_EXIT=$?

            # Para e remove container SonarQube temporário
            docker rm -f sonar-temp

            # Falha se SonarQube reprovou análise
            if [ $SCANNER_EXIT -ne 0 ]; then
              echo "Análise SonarQube falhou."
              exit 1
            fi

            # Remove container antigo se existir
            if docker ps -a --format '{{.Names}}' | grep -q '^projeto-vollo$'; then
              docker stop projeto-vollo
              docker rm projeto-vollo
            fi

            # Encontra porta livre no range 8206-8211
            AVAILABLE_PORT=$(for port in {8206..8211}; do
              if ! docker ps --format '{{.Ports}}' | grep -q $port; then
                echo $port
                break
              fi
            done)

            if [ -z "$AVAILABLE_PORT" ]; then
              echo "Nenhuma porta livre disponível no range 8206-8211"
              exit 1
            fi

            echo "Usando porta $AVAILABLE_PORT para o container projeto-vollo"

            # Executa container com a imagem atualizada
            docker run -d --name projeto-vollo -p $AVAILABLE_PORT:3000 $IMAGE_NAME

            echo "Deploy realizado com sucesso. Aplicação rodando na porta $AVAILABLE_PORT"
          EOF
