name: CI/CD - Projeto Vollo

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: devsamuel1227/projeto-vollo:latest
  SERVER_IP: 201.23.3.86
  SERVER_USER: aluno
  REMOTE_PATH: /home/aluno/projeto-vollo

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Login no Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build da imagem Docker
        run: docker build -t $IMAGE_NAME .

      - name: Push da imagem para Docker Hub
        run: docker push $IMAGE_NAME

      - name: Copiar código para o servidor remoto
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "."
          target: ${{ env.REMOTE_PATH }}

      - name: Executar análise SonarQube e deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Sobe container SonarQube temporário
            docker run -d --name sonar-temp -p 9000:9000 sonarqube

            # Aguarda SonarQube iniciar (timeout 120s)
            for i in {1..60}; do
              if curl -s http://localhost:9000/api/system/status | grep -q '"status":"UP"'; then
                break
              fi
              sleep 2
            done

            if ! curl -s http://localhost:9000/api/system/status | grep -q '"status":"UP"'; then
              echo "SonarQube não subiu a tempo."
              docker rm -f sonar-temp
              exit 1
            fi

            # Executa análise com rede do host
            docker run --rm --network host \
              -v $REMOTE_PATH:/usr/src \
              sonarsource/sonar-scanner-cli \
              -Dsonar.projectKey=projeto-vollo \
              -Dsonar.sources=. \
              -Dsonar.host.url=http://localhost:9000 \
              -Dsonar.login=${{ secrets.SONAR_TOKEN }}

            SCANNER_EXIT=$?

            # Remove SonarQube
            docker rm -f sonar-temp

            # Se análise falhar, aborta pipeline
            if [ $SCANNER_EXIT -ne 0 ]; then
              echo "Análise SonarQube falhou."
              exit 1
            fi

            # Remove container anterior se existir
            if docker ps -a --format '{{.Names}}' | grep -q '^projeto-vollo$'; then
              docker stop projeto-vollo
              docker rm projeto-vollo
            fi

            # Encontra porta livre de 8206-8211
            AVAILABLE_PORT=$(for port in {8206..8211}; do
              if ! docker ps --format '{{.Ports}}' | grep -q $port; then
                echo $port
                break
              fi
            done)

            if [ -z "$AVAILABLE_PORT" ]; then
              echo "Nenhuma porta livre disponível"
              exit 1
            fi

            echo "Iniciando aplicação na porta $AVAILABLE_PORT"

            # Sobe container da aplicação
            docker run -d --name projeto-vollo -p $AVAILABLE_PORT:3000 $IMAGE_NAME

            echo "Deploy realizado com sucesso em http://$SERVER_IP:$AVAILABLE_PORT"
